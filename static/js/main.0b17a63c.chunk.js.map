{"version":3,"sources":["Homepage.js","Cars.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","reactstrap_es","src","alt","Component","Cars","props","_this","call","state","data","_this2","d3","then","d","setState","console","log","className","map","i","sm","top","width","img","manufacturer","model","description","target","rel","href","link","About","App","HashRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b17a63c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nexport class Homepage extends Component {\n    render() {\n        return (\n            <div>\n                <Jumbotron>Hello! My name is Alice Miao and welcome to my website! I'll talk about my recent interest and some \n                    facts about myself in my website.\n                </Jumbotron>\n                <img src=\"img/alice.jpg\" alt=\"alice\"/>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { Card, CardImg, Button, CardBody, CardTitle, CardSubtitle, CardText, Col } from 'reactstrap';\n\nexport class Cars extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n    componentDidMount() {\n        d3.csv('data/cars.csv').then((d) => {\n            this.setState({\n                data: d\n            });\n        });\n    }\n    render() {\n        console.log(this.state.data)\n        return <div className=\"container\">I love cars. Below are my dream cars.\n                 { this.state.data.map((d, i) => {\n                       return <Col sm=\"6\" key={ \"car\" + i }>\n                              <Card>\n                              <CardImg top width=\"100%\" src={d.img} alt=\"cars\" />\n                                <CardBody>\n                                  <CardTitle>\n                                    { d.manufacturer }\n                                  </CardTitle>\n                                  <CardSubtitle>\n                                   { d.model } \n                                  </CardSubtitle>\n                                  <CardText>\n                                    { d.description }\n                                  </CardText>\n                                  <a target=\"_blank\" rel=\"noopener noreferrer\" href={ d.link }>\n                                    <Button>Link</Button>\n                                  </a>\n                                </CardBody>\n                              </Card>\n                              <br/>\n                              </Col>\n                   \n                   }) }\n               </div>\n    }\n}","import React, { Component } from 'react';\nexport class About extends Component {\n    render() {\n        return <div className=\"container\">\n            <img src=\"img/car.jpg\" alt=\"carinseattle\"/>\n            <p>\n            I am an international student from China. This is my third year in Seattle and I just got my Washington State driver's liscense. \n            And then I became really into cars. I love looking at different kinds of cars and hope one day I can buy one of them listed in \n            my interests page.</p>\n            <img src=\"img/uw.jpg\" alt=\"uw\"/>\n            <p>\n            Besides cars, I also love my school. I am thankful to be a student at University of Washington major in Informatics. This class\n            INFO 340 has taught me a lot of useful skills and managed to make me feel passionate about something. \n            </p>\n            <img src=\"img/food.jpg\" alt=\"food\"/>\n            <p>\n            Lastly, I'm also a foodie. I love trying different kinds of food and Seattle is just a heaven for a foodie like me.\n            There are so many kind of decent food here. One of my favorite is seafood. I've been to a fancy restaurant called Canlis\n            in Queen Anne, and it was the best restaurant I've ever tried in my entire life. It was really expensive but the food was\n            so good. Those local restaurants make my feel like I am part of the city. I'm able to enjoy the taste of food as well as \n            feeling the vibe of this city.\n            </p>\n        </div>\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Homepage } from './Homepage';\nimport { Cars } from './Cars';\nimport { About } from './About';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n              <div className=\"container\">\n                <Link to=\"/\">Home</Link>\n                { ' ' }\n                <Link to=\"/cars\">Interests</Link>\n                { ' ' }\n                <Link to=\"/about\">About</Link>\n                <Route exact path=\"/\" component={ Homepage } />\n                <Route path=\"/cars\" component={ Cars } />\n                <Route path=\"/about\" component={ About } />\n              </div>\n            </Router>\n            );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}